c
n
exit
import_params[:csv_file].tempfile.path
import_params[:csv_file].tempfile
import_params[:csv_file]
import_params
import_params[:file]
exit
params[:entity]
params
exit
c
Answer.last
Answer
Answers
entity
entity.answers
c
n
s
@klass.where(klass: @entity_class)
c
results.first(range)[(rand() * range).to_i][:question]
range
n
results.size
results
c
n
@csv_content
exit
@csv_file
@csv_content
c
arff.attributes[-1].type
arff.attributes[-1].type = type
arff.attributes[-1].type
type = "{#{@klass.all.map{ |e| e.name.parameterize.underscore }.join(',')}}"
arff.attributes[-1]
arff.attributes
c
arff.attributes[-1].type = "{escalade,badmington,baseball,basketball,bowling,boxe,danse,escrime,football,golf,hockey_sur_glace,judo,kung_fu,luge,lutte,musculation,natation,rugby,skateboard,roller,ski,snowboard,surf,tennis,tir_l_arc,triathlon,volleyball,accrobranche,parcour,aviron,biathlon,bmx,capoeira,cheerleading,gymnastique,marathon,deltaplane,parachute,equitation,handball,krav_maga,paintball,wingsuit,plonge,water_polo,karate,course_a_pied,cyclisme_sur_piste,plonge_sous_marine}"
arff.attributes[-1].name = "class"
arff.attributes[-1].type
arff.attributes[-1]
n
arff.attributes
arff.instances[-1]
c
arff.instances[-1]
arff.attributes[-1]
c
arff.attributes[-1]
arff.attributes
arff.instances
c
Question.all.count
instances[1].count
instances[0].count
instances[0]
instances
c
n
results
n
s
n
c
questions
n
asked_questions
c
results.first
n
c
best
n
results.first[:questio]
n
newgame
c
exit
c
score
n
score
n
exit
score
n
exit
c
score
n
score
n
c
n
results.first(10)[(rand() * 10).to_i][:question]
results.first(10)[(rand() * 10).to_i]
n
Question.all.map {|q| q.id }.size
Question.all.map {|q| q.id }
results.size
results
n
c
Question.all.map {|q| q.id }
results.size
results
n
c
results
results.first(10)
results
c
n
s
c
params[:questions].class
params[:questions]
params
c
json = params["_json"]
c
params
c
request[:body]
request
params
c
params
c
n
c
reload!
options
c
options
c
options
c
options
c
Sport.second.answers.count
Sport.first.answers.count
Sport.first.answers.first
Sport.first.answers
Sport.first
questions.first(10)[rand() * 10
(rand() * 10).to_i
rand() * 10
rand() * 100
rand() * 10
rand()
questions.first(10)[rand()
questions.first(10)
questions
questions.first[:score]
questions.first
n
c
questions.first
n
c
reload!
questions.first
questions.reverse!
questions
questions.sort_by! {|q| q[0]}
questions.sort_by!* {|q| q[0]}
questions.sort_by {|q| q[0]}.reverse.first
questions.sort_by {|q| q[0]}.reverse
questions.sort_by {|q| q[0]}.last
questions.sort_by {|q| q[0]}.first
questions.sort_by {|q| q[0]}
questions.second
questions.first
questions.size
questions
n
c
calc_question_score(Question.first)
calc_question_scoring(Question.first)
c
n
service.filename
c
n
service.filename
exit
question.save
question.nominal = "exterieur"
question
exit
Answer.answers[@sport.answers[i].answer]
@sport.answers[i].answer
exit
c
exit
answer
exit
params[:sport][:questions].each {|k,v| [k, v] }
params[:sport][:questions].map {|k,v| [k, v] }
params[:sport][:questions].each {|k,v| [k, v] }
params[:sport][:questions].each
params[:sport][:questions]
params
exit
@sport.answer
@sport.questions
@sport
params
